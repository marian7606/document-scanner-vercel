
import { NextRequest, NextResponse } from 'next/server';
import nodemailer from 'nodemailer';

export const dynamic = 'force-dynamic';

export async function POST(request: NextRequest) {
  try {
    const { pdfData, fileName, metadata } = await request.json();

    if (!pdfData) {
      return NextResponse.json(
        { error: 'PDF –¥–∞–Ω–Ω–∏—Ç–µ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' },
        { status: 400 }
      );
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ SMTP transporter
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.gmail.com',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: parseInt(process.env.SMTP_PORT || '587') === 465, // true –∑–∞ 465, false –∑–∞ –¥—Ä—É–≥–∏ –ø–æ—Ä—Ç–æ–≤–µ
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SMTP –≤—Ä—ä–∑–∫–∞—Ç–∞
    await transporter.verify();

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ base64 –∫—ä–º Buffer
    const pdfBuffer = Buffer.from(pdfData.split(',')[1], 'base64');

    // –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∏–º–µ –Ω–∞ —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–∞ –∏ —á–∞—Å
    const now = new Date();
    const dateStr = now.toLocaleDateString('bg-BG');
    const timeStr = now.toLocaleTimeString('bg-BG');
    const finalFileName = fileName || `–°–∫–∞–Ω–∏—Ä–∞–Ω_–¥–æ–∫—É–º–µ–Ω—Ç_${now.getTime()}.pdf`;

    // HTML —Ç–µ–º–ø–ª–µ–π—Ç –∑–∞ –∏–º–µ–π–ª–∞
    const htmlTemplate = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
          .content { background: white; padding: 20px; border: 1px solid #e9ecef; border-radius: 8px; }
          .footer { margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; font-size: 12px; color: #666; }
          .highlight { color: #007bff; font-weight: bold; }
          .metadata { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h2>üìÑ –ù–æ–≤ —Å–∫–∞–Ω–∏—Ä–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç</h2>
            <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑–ø—Ä–∞—Ç–µ–Ω –æ—Ç Document Scanner App</p>
          </div>
          
          <div class="content">
            <h3>–î–µ—Ç–∞–π–ª–∏ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:</h3>
            <div class="metadata">
              <p><strong>üìÖ –î–∞—Ç–∞ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ:</strong> <span class="highlight">${dateStr}</span></p>
              <p><strong>üïê –ß–∞—Å –Ω–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ:</strong> <span class="highlight">${timeStr}</span></p>
              <p><strong>üìé –ò–º–µ –Ω–∞ —Ñ–∞–π–ª–∞:</strong> <span class="highlight">${finalFileName}</span></p>
              <p><strong>üìè –†–∞–∑–º–µ—Ä –Ω–∞ —Ñ–∞–π–ª–∞:</strong> <span class="highlight">${(pdfBuffer.length / 1024).toFixed(2)} KB</span></p>
              ${metadata ? `<p><strong>‚ÑπÔ∏è –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> ${metadata}</p>` : ''}
            </div>
            
            <p>–ú–æ–ª—è, –Ω–∞–º–µ—Ä–µ—Ç–µ –ø—Ä–∏–∫–∞—á–µ–Ω–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç. –î–æ–∫—É–º–µ–Ω—Ç—ä—Ç –µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω –∑–∞ –ø–µ—á–∞—Ç.</p>
            
            <p><strong>–ó–∞–±–µ–ª–µ–∂–∫–∞:</strong> –¢–æ–∑–∏ –∏–º–µ–π–ª –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –∑–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏.</p>
          </div>
          
          <div class="footer">
            <p>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω –∏–º–µ–π–ª –æ—Ç Document Scanner App</p>
            <p>–î–∞—Ç–∞ –∏ —á–∞—Å –Ω–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ: ${now.toLocaleString('bg-BG')}</p>
          </div>
        </div>
      </body>
      </html>
    `;

    // –û–ø—Ü–∏–∏ –∑–∞ –∏–º–µ–π–ª–∞
    const mailOptions = {
      from: `"Document Scanner App" <${process.env.EMAIL_FROM}>`,
      to: process.env.EMAIL_TO,
      subject: `üìÑ –ù–æ–≤ —Å–∫–∞–Ω–∏—Ä–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç - ${dateStr} ${timeStr}`,
      html: htmlTemplate,
      attachments: [
        {
          filename: finalFileName,
          content: pdfBuffer,
          contentType: 'application/pdf',
        },
      ],
    };

    // –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∞
    const info = await transporter.sendMail(mailOptions);

    console.log('–ò–º–µ–π–ª—ä—Ç –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ:', info.messageId);

    return NextResponse.json({
      success: true,
      message: '–ò–º–µ–π–ª—ä—Ç –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
      messageId: info.messageId,
      fileName: finalFileName,
      fileSize: `${(pdfBuffer.length / 1024).toFixed(2)} KB`,
    });

  } catch (error) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª:', error);
    
    let errorMessage = '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–º–µ–π–ª–∞';
    
    if (error instanceof Error) {
      if (error.message.includes('Invalid login')) {
        errorMessage = '–ì—Ä–µ—à–∫–∞ –≤ SMTP –∞–≤—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—è—Ç–∞. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–º–µ–π–ª –¥–∞–Ω–Ω–∏—Ç–µ.';
      } else if (error.message.includes('ECONNREFUSED')) {
        errorMessage = '–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–µ —Å—ä—Å SMTP —Å—ä—Ä–≤—ä—Ä–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –º—Ä–µ–∂–æ–≤–∞—Ç–∞ –≤—Ä—ä–∑–∫–∞.';
      } else {
        errorMessage = `–ì—Ä–µ—à–∫–∞: ${error.message}`;
      }
    }

    return NextResponse.json(
      { 
        error: errorMessage,
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞'
      },
      { status: 500 }
    );
  }
}
